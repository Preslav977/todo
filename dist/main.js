(()=>{"use strict";const t=[[]],e=[[]];class o{constructor(t,e,o,i,s){this.title=t,this.description=e,this.dueDate=o,this.priority=i,this.id=crypto.randomUUID()}get title(){return this._title}set title(t){t.length<5?console.log("The title of this todo, is too short, 5 characters at least"):this._title=t}get description(){return this._description}set description(t){t.length<10?console.log("The description of this todo is too short, 10 characters at least"):this._description=t}get dueDate(){return this._dueDate}set dueDate(t){this._dueDate=t}get priority(){return this._priority}set priority(t){this._priority=t}get id(){return this.id}set id(t){this._id=t}}const i=new class{constructor(t,e){this.title=t,this.id=crypto.randomUUID()}get title(){return this._title}set title(t){t.length<5&&console.log("Project name is too short, 5 characters at least"),this._title=t}get id(){return this._id}set id(t){this._id=t}createProjects(){}readProjects(e){console.log(t[e])}updateProjects(e){t.push(e)}deleteProjects(e){t.splice(e,1)}}("Default"),s=new class{constructor(t){this.title=t}get title(){return this._title}set title(t){t.length<5&&console.log("Project name is too short, 5 characters at least"),this._title=t}createProject(){}readToDoItem(t){console.log(e[t])}updateToDoItem(t){e.push(t)}deleteToDoItem(t){e.splice(t,1)}}("Default Project");i.updateProjects(s);const r=new o("working on todo","working on some implementation","19/5/2024","high");s.updateToDoItem(r);const c=new o("working on some additional things","this is for todo also","20/5/2024","medium");s.updateToDoItem(c);const n=new o("driving the car","to get to the city","21/5/2024","low");s.updateToDoItem(n),i.updateProjects(e),console.log(t)})();