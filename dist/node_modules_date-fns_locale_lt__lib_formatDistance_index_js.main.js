"use strict";
(self["webpackChunktemplate_repository"] = self["webpackChunktemplate_repository"] || []).push([["node_modules_date-fns_locale_lt__lib_formatDistance_index_js"],{

/***/ "./node_modules/date-fns/locale/lt/_lib/formatDistance/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/locale/lt/_lib/formatDistance/index.js ***!
  \**********************************************************************/
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var translations = {
  xseconds_other: 'sekundė_sekundžių_sekundes',
  xminutes_one: 'minutė_minutės_minutę',
  xminutes_other: 'minutės_minučių_minutes',
  xhours_one: 'valanda_valandos_valandą',
  xhours_other: 'valandos_valandų_valandas',
  xdays_one: 'diena_dienos_dieną',
  xdays_other: 'dienos_dienų_dienas',
  xweeks_one: 'savaitė_savaitės_savaitę',
  xweeks_other: 'savaitės_savaičių_savaites',
  xmonths_one: 'mėnuo_mėnesio_mėnesį',
  xmonths_other: 'mėnesiai_mėnesių_mėnesius',
  xyears_one: 'metai_metų_metus',
  xyears_other: 'metai_metų_metus',
  about: 'apie',
  over: 'daugiau nei',
  almost: 'beveik',
  lessthan: 'mažiau nei'
};
var translateSeconds = function translateSeconds(_number, addSuffix, _key, isFuture) {
  if (!addSuffix) {
    return 'kelios sekundės';
  } else {
    return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
  }
};
var translateSingular = function translateSingular(_number, addSuffix, key, isFuture) {
  return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
};
var translate = function translate(number, addSuffix, key, isFuture) {
  var result = number + ' ';
  if (number === 1) {
    return result + translateSingular(number, addSuffix, key, isFuture);
  } else if (!addSuffix) {
    return result + (special(number) ? forms(key)[1] : forms(key)[0]);
  } else {
    if (isFuture) {
      return result + forms(key)[1];
    } else {
      return result + (special(number) ? forms(key)[1] : forms(key)[2]);
    }
  }
};
function special(number) {
  return number % 10 === 0 || number > 10 && number < 20;
}
function forms(key) {
  return translations[key].split('_');
}
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: translateSeconds,
    other: translate
  },
  xSeconds: {
    one: translateSeconds,
    other: translate
  },
  halfAMinute: 'pusė minutės',
  lessThanXMinutes: {
    one: translateSingular,
    other: translate
  },
  xMinutes: {
    one: translateSingular,
    other: translate
  },
  aboutXHours: {
    one: translateSingular,
    other: translate
  },
  xHours: {
    one: translateSingular,
    other: translate
  },
  xDays: {
    one: translateSingular,
    other: translate
  },
  aboutXWeeks: {
    one: translateSingular,
    other: translate
  },
  xWeeks: {
    one: translateSingular,
    other: translate
  },
  aboutXMonths: {
    one: translateSingular,
    other: translate
  },
  xMonths: {
    one: translateSingular,
    other: translate
  },
  aboutXYears: {
    one: translateSingular,
    other: translate
  },
  xYears: {
    one: translateSingular,
    other: translate
  },
  overXYears: {
    one: translateSingular,
    other: translate
  },
  almostXYears: {
    one: translateSingular,
    other: translate
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var isFuture = (options === null || options === void 0 ? void 0 : options.comparison) !== undefined && options.comparison > 0;
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_one', isFuture);
  } else {
    result = tokenValue.other(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + '_other', isFuture);
  }
  if (adverb) {
    var _key2 = adverb[0].toLowerCase();
    result = translations[_key2] + ' ' + result;
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'po ' + result;
    } else {
      return 'prieš ' + result;
    }
  }
  return result;
};
var _default = formatDistance;
exports["default"] = _default;
module.exports = exports.default;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2RhdGUtZm5zX2xvY2FsZV9sdF9fbGliX2Zvcm1hdERpc3RhbmNlX2luZGV4X2pzLm1haW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wbGF0ZS1yZXBvc2l0b3J5Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9sdC9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHRyYW5zbGF0aW9ucyA9IHtcbiAgeHNlY29uZHNfb3RoZXI6ICdzZWt1bmTEl19zZWt1bmTFvmnFs19zZWt1bmRlcycsXG4gIHhtaW51dGVzX29uZTogJ21pbnV0xJdfbWludXTEl3NfbWludXTEmScsXG4gIHhtaW51dGVzX290aGVyOiAnbWludXTEl3NfbWludcSNacWzX21pbnV0ZXMnLFxuICB4aG91cnNfb25lOiAndmFsYW5kYV92YWxhbmRvc192YWxhbmTEhScsXG4gIHhob3Vyc19vdGhlcjogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgeGRheXNfb25lOiAnZGllbmFfZGllbm9zX2RpZW7EhScsXG4gIHhkYXlzX290aGVyOiAnZGllbm9zX2RpZW7Fs19kaWVuYXMnLFxuICB4d2Vla3Nfb25lOiAnc2F2YWl0xJdfc2F2YWl0xJdzX3NhdmFpdMSZJyxcbiAgeHdlZWtzX290aGVyOiAnc2F2YWl0xJdzX3NhdmFpxI1pxbNfc2F2YWl0ZXMnLFxuICB4bW9udGhzX29uZTogJ23El251b19txJduZXNpb19txJduZXPErycsXG4gIHhtb250aHNfb3RoZXI6ICdtxJduZXNpYWlfbcSXbmVzacWzX23El25lc2l1cycsXG4gIHh5ZWFyc19vbmU6ICdtZXRhaV9tZXTFs19tZXR1cycsXG4gIHh5ZWFyc19vdGhlcjogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgYWJvdXQ6ICdhcGllJyxcbiAgb3ZlcjogJ2RhdWdpYXUgbmVpJyxcbiAgYWxtb3N0OiAnYmV2ZWlrJyxcbiAgbGVzc3RoYW46ICdtYcW+aWF1IG5laSdcbn07XG52YXIgdHJhbnNsYXRlU2Vjb25kcyA9IGZ1bmN0aW9uIHRyYW5zbGF0ZVNlY29uZHMoX251bWJlciwgYWRkU3VmZml4LCBfa2V5LCBpc0Z1dHVyZSkge1xuICBpZiAoIWFkZFN1ZmZpeCkge1xuICAgIHJldHVybiAna2VsaW9zIHNla3VuZMSXcyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlzRnV0dXJlID8gJ2tlbGnFsyBzZWt1bmTFvmnFsycgOiAna2VsaWFzIHNla3VuZGVzJztcbiAgfVxufTtcbnZhciB0cmFuc2xhdGVTaW5ndWxhciA9IGZ1bmN0aW9uIHRyYW5zbGF0ZVNpbmd1bGFyKF9udW1iZXIsIGFkZFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICByZXR1cm4gIWFkZFN1ZmZpeCA/IGZvcm1zKGtleSlbMF0gOiBpc0Z1dHVyZSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdO1xufTtcbnZhciB0cmFuc2xhdGUgPSBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCBhZGRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgIHJldHVybiByZXN1bHQgKyB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIGFkZFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSk7XG4gIH0gZWxzZSBpZiAoIWFkZFN1ZmZpeCkge1xuICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChpc0Z1dHVyZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIGZvcm1zKGtleSlbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMl0pO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCBudW1iZXIgPiAxMCAmJiBudW1iZXIgPCAyMDtcbn1cbmZ1bmN0aW9uIGZvcm1zKGtleSkge1xuICByZXR1cm4gdHJhbnNsYXRpb25zW2tleV0uc3BsaXQoJ18nKTtcbn1cbnZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogdHJhbnNsYXRlU2Vjb25kcyxcbiAgICBvdGhlcjogdHJhbnNsYXRlXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiB0cmFuc2xhdGVTZWNvbmRzLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdwdXPElyBtaW51dMSXcycsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICBvdGhlcjogdHJhbnNsYXRlXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICBvdGhlcjogdHJhbnNsYXRlXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICBvdGhlcjogdHJhbnNsYXRlXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgb3RoZXI6IHRyYW5zbGF0ZVxuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgb3RoZXI6IHRyYW5zbGF0ZVxuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgb3RoZXI6IHRyYW5zbGF0ZVxuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgb3RoZXI6IHRyYW5zbGF0ZVxuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgIG90aGVyOiB0cmFuc2xhdGVcbiAgfVxufTtcbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgYWR2ZXJiID0gdG9rZW4ubWF0Y2goL2Fib3V0fG92ZXJ8YWxtb3N0fGxlc3N0aGFuL2kpO1xuICB2YXIgdW5pdCA9IGFkdmVyYiA/IHRva2VuLnJlcGxhY2UoYWR2ZXJiWzBdLCAnJykgOiB0b2tlbjtcbiAgdmFyIGlzRnV0dXJlID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb21wYXJpc29uKSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDA7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lKGNvdW50LCAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFkZFN1ZmZpeCkgPT09IHRydWUsIHVuaXQudG9Mb3dlckNhc2UoKSArICdfb25lJywgaXNGdXR1cmUpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIoY291bnQsIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWRkU3VmZml4KSA9PT0gdHJ1ZSwgdW5pdC50b0xvd2VyQ2FzZSgpICsgJ19vdGhlcicsIGlzRnV0dXJlKTtcbiAgfVxuICBpZiAoYWR2ZXJiKSB7XG4gICAgdmFyIF9rZXkyID0gYWR2ZXJiWzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgcmVzdWx0ID0gdHJhbnNsYXRpb25zW19rZXkyXSArICcgJyArIHJlc3VsdDtcbiAgfVxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAncG8gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdwcmllxaEgJyArIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX2RlZmF1bHQgPSBmb3JtYXREaXN0YW5jZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9