"use strict";
(self["webpackChunktemplate_repository"] = self["webpackChunktemplate_repository"] || []).push([["node_modules_date-fns_locale_pl__lib_formatDistance_index_js"],{

/***/ "./node_modules/date-fns/locale/pl/_lib/formatDistance/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/date-fns/locale/pl/_lib/formatDistance/index.js ***!
  \**********************************************************************/
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: 'mniej niż sekunda',
      past: 'mniej niż sekundę',
      future: 'mniej niż sekundę'
    },
    twoFour: 'mniej niż {{count}} sekundy',
    other: 'mniej niż {{count}} sekund'
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundę',
      future: 'sekundę'
    },
    twoFour: '{{count}} sekundy',
    other: '{{count}} sekund'
  },
  halfAMinute: {
    one: 'pół minuty',
    twoFour: 'pół minuty',
    other: 'pół minuty'
  },
  lessThanXMinutes: {
    one: {
      regular: 'mniej niż minuta',
      past: 'mniej niż minutę',
      future: 'mniej niż minutę'
    },
    twoFour: 'mniej niż {{count}} minuty',
    other: 'mniej niż {{count}} minut'
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'minutę',
      future: 'minutę'
    },
    twoFour: '{{count}} minuty',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: {
      regular: 'około godziny',
      past: 'około godziny',
      future: 'około godzinę'
    },
    twoFour: 'około {{count}} godziny',
    other: 'około {{count}} godzin'
  },
  xHours: {
    one: {
      regular: 'godzina',
      past: 'godzinę',
      future: 'godzinę'
    },
    twoFour: '{{count}} godziny',
    other: '{{count}} godzin'
  },
  xDays: {
    one: {
      regular: 'dzień',
      past: 'dzień',
      future: '1 dzień'
    },
    twoFour: '{{count}} dni',
    other: '{{count}} dni'
  },
  aboutXWeeks: {
    one: 'około tygodnia',
    twoFour: 'około {{count}} tygodni',
    other: 'około {{count}} tygodni'
  },
  xWeeks: {
    one: 'tydzień',
    twoFour: '{{count}} tygodnie',
    other: '{{count}} tygodni'
  },
  aboutXMonths: {
    one: 'około miesiąc',
    twoFour: 'około {{count}} miesiące',
    other: 'około {{count}} miesięcy'
  },
  xMonths: {
    one: 'miesiąc',
    twoFour: '{{count}} miesiące',
    other: '{{count}} miesięcy'
  },
  aboutXYears: {
    one: 'około rok',
    twoFour: 'około {{count}} lata',
    other: 'około {{count}} lat'
  },
  xYears: {
    one: 'rok',
    twoFour: '{{count}} lata',
    other: '{{count}} lat'
  },
  overXYears: {
    one: 'ponad rok',
    twoFour: 'ponad {{count}} lata',
    other: 'ponad {{count}} lat'
  },
  almostXYears: {
    one: 'prawie rok',
    twoFour: 'prawie {{count}} lata',
    other: 'prawie {{count}} lat'
  }
};
function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }
  var rem100 = count % 100;

  // ends with 11-20
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }
  var rem10 = rem100 % 10;

  // ends with 2, 3, 4
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function declension(scheme, count, time) {
  var group = declensionGroup(scheme, count);
  var finalText = typeof group === 'string' ? group : group[time];
  return finalText.replace('{{count}}', String(count));
}
var formatDistance = function formatDistance(token, count, options) {
  var scheme = formatDistanceLocale[token];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return declension(scheme, count, 'regular');
  }
  if (options.comparison && options.comparison > 0) {
    return 'za ' + declension(scheme, count, 'future');
  } else {
    return declension(scheme, count, 'past') + ' temu';
  }
};
var _default = formatDistance;
exports["default"] = _default;
module.exports = exports.default;

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2RhdGUtZm5zX2xvY2FsZV9wbF9fbGliX2Zvcm1hdERpc3RhbmNlX2luZGV4X2pzLm1haW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMEJBQTBCLFFBQVE7QUFDbEMsd0JBQXdCLFFBQVE7QUFDaEMsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZ0JBQWdCLFFBQVE7QUFDeEIsY0FBYyxRQUFRO0FBQ3RCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDBCQUEwQixRQUFRO0FBQ2xDLHdCQUF3QixRQUFRO0FBQ2hDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGdCQUFnQixRQUFRO0FBQ3hCLGNBQWMsUUFBUTtBQUN0QixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxzQkFBc0IsUUFBUTtBQUM5QixvQkFBb0IsUUFBUTtBQUM1QixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQkFBZ0IsUUFBUTtBQUN4QixjQUFjLFFBQVE7QUFDdEIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZ0JBQWdCLFFBQVE7QUFDeEIsY0FBYyxRQUFRO0FBQ3RCLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUIsb0JBQW9CLFFBQVE7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixjQUFjLFFBQVE7QUFDdEIsR0FBRztBQUNIO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QixvQkFBb0IsUUFBUTtBQUM1QixHQUFHO0FBQ0g7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCLGNBQWMsUUFBUTtBQUN0QixHQUFHO0FBQ0g7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCLG9CQUFvQixRQUFRO0FBQzVCLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEIsY0FBYyxRQUFRO0FBQ3RCLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUIsb0JBQW9CLFFBQVE7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQixxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixPQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcGxhdGUtcmVwb3NpdG9yeS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvcGwvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ21uaWVqIG5pxbwgc2VrdW5kYScsXG4gICAgICBwYXN0OiAnbW5pZWogbmnFvCBzZWt1bmTEmScsXG4gICAgICBmdXR1cmU6ICdtbmllaiBuacW8IHNla3VuZMSZJ1xuICAgIH0sXG4gICAgdHdvRm91cjogJ21uaWVqIG5pxbwge3tjb3VudH19IHNla3VuZHknLFxuICAgIG90aGVyOiAnbW5pZWogbmnFvCB7e2NvdW50fX0gc2VrdW5kJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ3Nla3VuZGEnLFxuICAgICAgcGFzdDogJ3Nla3VuZMSZJyxcbiAgICAgIGZ1dHVyZTogJ3Nla3VuZMSZJ1xuICAgIH0sXG4gICAgdHdvRm91cjogJ3t7Y291bnR9fSBzZWt1bmR5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWt1bmQnXG4gIH0sXG4gIGhhbGZBTWludXRlOiB7XG4gICAgb25lOiAncMOzxYIgbWludXR5JyxcbiAgICB0d29Gb3VyOiAncMOzxYIgbWludXR5JyxcbiAgICBvdGhlcjogJ3DDs8WCIG1pbnV0eSdcbiAgfSxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ21uaWVqIG5pxbwgbWludXRhJyxcbiAgICAgIHBhc3Q6ICdtbmllaiBuacW8IG1pbnV0xJknLFxuICAgICAgZnV0dXJlOiAnbW5pZWogbmnFvCBtaW51dMSZJ1xuICAgIH0sXG4gICAgdHdvRm91cjogJ21uaWVqIG5pxbwge3tjb3VudH19IG1pbnV0eScsXG4gICAgb3RoZXI6ICdtbmllaiBuacW8IHt7Y291bnR9fSBtaW51dCdcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtaW51dGEnLFxuICAgICAgcGFzdDogJ21pbnV0xJknLFxuICAgICAgZnV0dXJlOiAnbWludXTEmSdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICd7e2NvdW50fX0gbWludXR5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dCdcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdva2/Fgm8gZ29kemlueScsXG4gICAgICBwYXN0OiAnb2tvxYJvIGdvZHppbnknLFxuICAgICAgZnV0dXJlOiAnb2tvxYJvIGdvZHppbsSZJ1xuICAgIH0sXG4gICAgdHdvRm91cjogJ29rb8WCbyB7e2NvdW50fX0gZ29kemlueScsXG4gICAgb3RoZXI6ICdva2/Fgm8ge3tjb3VudH19IGdvZHppbidcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnZ29kemluYScsXG4gICAgICBwYXN0OiAnZ29kemluxJknLFxuICAgICAgZnV0dXJlOiAnZ29kemluxJknXG4gICAgfSxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IGdvZHppbnknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGdvZHppbidcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdkemllxYQnLFxuICAgICAgcGFzdDogJ2R6aWXFhCcsXG4gICAgICBmdXR1cmU6ICcxIGR6aWXFhCdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICd7e2NvdW50fX0gZG5pJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkbmknXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnb2tvxYJvIHR5Z29kbmlhJyxcbiAgICB0d29Gb3VyOiAnb2tvxYJvIHt7Y291bnR9fSB0eWdvZG5pJyxcbiAgICBvdGhlcjogJ29rb8WCbyB7e2NvdW50fX0gdHlnb2RuaSdcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAndHlkemllxYQnLFxuICAgIHR3b0ZvdXI6ICd7e2NvdW50fX0gdHlnb2RuaWUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHR5Z29kbmknXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ29rb8WCbyBtaWVzacSFYycsXG4gICAgdHdvRm91cjogJ29rb8WCbyB7e2NvdW50fX0gbWllc2nEhWNlJyxcbiAgICBvdGhlcjogJ29rb8WCbyB7e2NvdW50fX0gbWllc2nEmWN5J1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnbWllc2nEhWMnLFxuICAgIHR3b0ZvdXI6ICd7e2NvdW50fX0gbWllc2nEhWNlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaWVzacSZY3knXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnb2tvxYJvIHJvaycsXG4gICAgdHdvRm91cjogJ29rb8WCbyB7e2NvdW50fX0gbGF0YScsXG4gICAgb3RoZXI6ICdva2/Fgm8ge3tjb3VudH19IGxhdCdcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAncm9rJyxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IGxhdGEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IGxhdCdcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ3BvbmFkIHJvaycsXG4gICAgdHdvRm91cjogJ3BvbmFkIHt7Y291bnR9fSBsYXRhJyxcbiAgICBvdGhlcjogJ3BvbmFkIHt7Y291bnR9fSBsYXQnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ3ByYXdpZSByb2snLFxuICAgIHR3b0ZvdXI6ICdwcmF3aWUge3tjb3VudH19IGxhdGEnLFxuICAgIG90aGVyOiAncHJhd2llIHt7Y291bnR9fSBsYXQnXG4gIH1cbn07XG5mdW5jdGlvbiBkZWNsZW5zaW9uR3JvdXAoc2NoZW1lLCBjb3VudCkge1xuICBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXR1cm4gc2NoZW1lLm9uZTtcbiAgfVxuICB2YXIgcmVtMTAwID0gY291bnQgJSAxMDA7XG5cbiAgLy8gZW5kcyB3aXRoIDExLTIwXG4gIGlmIChyZW0xMDAgPD0gMjAgJiYgcmVtMTAwID4gMTApIHtcbiAgICByZXR1cm4gc2NoZW1lLm90aGVyO1xuICB9XG4gIHZhciByZW0xMCA9IHJlbTEwMCAlIDEwO1xuXG4gIC8vIGVuZHMgd2l0aCAyLCAzLCA0XG4gIGlmIChyZW0xMCA+PSAyICYmIHJlbTEwIDw9IDQpIHtcbiAgICByZXR1cm4gc2NoZW1lLnR3b0ZvdXI7XG4gIH1cbiAgcmV0dXJuIHNjaGVtZS5vdGhlcjtcbn1cbmZ1bmN0aW9uIGRlY2xlbnNpb24oc2NoZW1lLCBjb3VudCwgdGltZSkge1xuICB2YXIgZ3JvdXAgPSBkZWNsZW5zaW9uR3JvdXAoc2NoZW1lLCBjb3VudCk7XG4gIHZhciBmaW5hbFRleHQgPSB0eXBlb2YgZ3JvdXAgPT09ICdzdHJpbmcnID8gZ3JvdXAgOiBncm91cFt0aW1lXTtcbiAgcmV0dXJuIGZpbmFsVGV4dC5yZXBsYWNlKCd7e2NvdW50fX0nLCBTdHJpbmcoY291bnQpKTtcbn1cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgc2NoZW1lID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkpIHtcbiAgICByZXR1cm4gZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50LCAncmVndWxhcicpO1xuICB9XG4gIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgIHJldHVybiAnemEgJyArIGRlY2xlbnNpb24oc2NoZW1lLCBjb3VudCwgJ2Z1dHVyZScpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWNsZW5zaW9uKHNjaGVtZSwgY291bnQsICdwYXN0JykgKyAnIHRlbXUnO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gZm9ybWF0RGlzdGFuY2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==